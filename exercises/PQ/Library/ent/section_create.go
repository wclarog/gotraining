// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"excercise-library/ent/magazine"
	"excercise-library/ent/section"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// SectionCreate is the builder for creating a Section entity.
type SectionCreate struct {
	config
	mutation *SectionMutation
	hooks    []Hook
}

// SetCode sets the code field.
func (sc *SectionCreate) SetCode(s string) *SectionCreate {
	sc.mutation.SetCode(s)
	return sc
}

// SetContent sets the content field.
func (sc *SectionCreate) SetContent(s string) *SectionCreate {
	sc.mutation.SetContent(s)
	return sc
}

// SetRelatedMagazineID sets the relatedMagazine edge to Magazine by id.
func (sc *SectionCreate) SetRelatedMagazineID(id int) *SectionCreate {
	sc.mutation.SetRelatedMagazineID(id)
	return sc
}

// SetNillableRelatedMagazineID sets the relatedMagazine edge to Magazine by id if the given value is not nil.
func (sc *SectionCreate) SetNillableRelatedMagazineID(id *int) *SectionCreate {
	if id != nil {
		sc = sc.SetRelatedMagazineID(*id)
	}
	return sc
}

// SetRelatedMagazine sets the relatedMagazine edge to Magazine.
func (sc *SectionCreate) SetRelatedMagazine(m *Magazine) *SectionCreate {
	return sc.SetRelatedMagazineID(m.ID)
}

// Mutation returns the SectionMutation object of the builder.
func (sc *SectionCreate) Mutation() *SectionMutation {
	return sc.mutation
}

// Save creates the Section in the database.
func (sc *SectionCreate) Save(ctx context.Context) (*Section, error) {
	if err := sc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Section
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SectionCreate) SaveX(ctx context.Context) *Section {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SectionCreate) preSave() error {
	if _, ok := sc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := sc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New("ent: missing required field \"content\"")}
	}
	return nil
}

func (sc *SectionCreate) sqlSave(ctx context.Context) (*Section, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}

func (sc *SectionCreate) createSpec() (*Section, *sqlgraph.CreateSpec) {
	var (
		s     = &Section{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: section.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: section.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: section.FieldCode,
		})
		s.Code = value
	}
	if value, ok := sc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: section.FieldContent,
		})
		s.Content = value
	}
	if nodes := sc.mutation.RelatedMagazineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.RelatedMagazineTable,
			Columns: []string{section.RelatedMagazineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: magazine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}

// SectionCreateBulk is the builder for creating a bulk of Section entities.
type SectionCreateBulk struct {
	config
	builders []*SectionCreate
}

// Save creates the Section entities in the database.
func (scb *SectionCreateBulk) Save(ctx context.Context) ([]*Section, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Section, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*SectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (scb *SectionCreateBulk) SaveX(ctx context.Context) []*Section {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
