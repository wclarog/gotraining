// Code generated by entc, DO NOT EDIT.

package ent

import (
	"excercise-library/ent/book"
	"excercise-library/ent/material"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Book is the model entity for the Book schema.
type Book struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AuthorName holds the value of the "authorName" field.
	AuthorName string `json:"authorName,omitempty"`
	// Genre holds the value of the "genre" field.
	Genre string `json:"genre,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookQuery when eager-loading is set.
	Edges       BookEdges `json:"edges"`
	material_id *int
}

// BookEdges holds the relations/edges for other nodes in the graph.
type BookEdges struct {
	// RelatedMaterial holds the value of the relatedMaterial edge.
	RelatedMaterial *Material
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RelatedMaterialOrErr returns the RelatedMaterial value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookEdges) RelatedMaterialOrErr() (*Material, error) {
	if e.loadedTypes[0] {
		if e.RelatedMaterial == nil {
			// The edge relatedMaterial was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: material.Label}
		}
		return e.RelatedMaterial, nil
	}
	return nil, &NotLoadedError{edge: "relatedMaterial"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Book) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // authorName
		&sql.NullString{}, // genre
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Book) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // material_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Book fields.
func (b *Book) assignValues(values ...interface{}) error {
	if m, n := len(values), len(book.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field authorName", values[0])
	} else if value.Valid {
		b.AuthorName = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field genre", values[1])
	} else if value.Valid {
		b.Genre = value.String
	}
	values = values[2:]
	if len(values) == len(book.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field material_id", value)
		} else if value.Valid {
			b.material_id = new(int)
			*b.material_id = int(value.Int64)
		}
	}
	return nil
}

// QueryRelatedMaterial queries the relatedMaterial edge of the Book.
func (b *Book) QueryRelatedMaterial() *MaterialQuery {
	return (&BookClient{config: b.config}).QueryRelatedMaterial(b)
}

// Update returns a builder for updating this Book.
// Note that, you need to call Book.Unwrap() before calling this method, if this Book
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Book) Update() *BookUpdateOne {
	return (&BookClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Book) Unwrap() *Book {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Book is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Book) String() string {
	var builder strings.Builder
	builder.WriteString("Book(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", authorName=")
	builder.WriteString(b.AuthorName)
	builder.WriteString(", genre=")
	builder.WriteString(b.Genre)
	builder.WriteByte(')')
	return builder.String()
}

// Books is a parsable slice of Book.
type Books []*Book

func (b Books) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
