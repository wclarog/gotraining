// Code generated by entc, DO NOT EDIT.

package material

import (
	"go-kit-template/ent/predicate"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UniqueCode applies equality check predicate on the "uniqueCode" field. It's identical to UniqueCodeEQ.
func UniqueCode(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUniqueCode), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// DateOfEmission applies equality check predicate on the "dateOfEmission" field. It's identical to DateOfEmissionEQ.
func DateOfEmission(v time.Time) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateOfEmission), v))
	})
}

// NumberOfPages applies equality check predicate on the "numberOfPages" field. It's identical to NumberOfPagesEQ.
func NumberOfPages(v int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumberOfPages), v))
	})
}

// MaterialType applies equality check predicate on the "materialType" field. It's identical to MaterialTypeEQ.
func MaterialType(v int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialType), v))
	})
}

// UniqueCodeEQ applies the EQ predicate on the "uniqueCode" field.
func UniqueCodeEQ(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUniqueCode), v))
	})
}

// UniqueCodeNEQ applies the NEQ predicate on the "uniqueCode" field.
func UniqueCodeNEQ(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUniqueCode), v))
	})
}

// UniqueCodeIn applies the In predicate on the "uniqueCode" field.
func UniqueCodeIn(vs ...string) predicate.Material {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Material(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUniqueCode), v...))
	})
}

// UniqueCodeNotIn applies the NotIn predicate on the "uniqueCode" field.
func UniqueCodeNotIn(vs ...string) predicate.Material {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Material(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUniqueCode), v...))
	})
}

// UniqueCodeGT applies the GT predicate on the "uniqueCode" field.
func UniqueCodeGT(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUniqueCode), v))
	})
}

// UniqueCodeGTE applies the GTE predicate on the "uniqueCode" field.
func UniqueCodeGTE(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUniqueCode), v))
	})
}

// UniqueCodeLT applies the LT predicate on the "uniqueCode" field.
func UniqueCodeLT(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUniqueCode), v))
	})
}

// UniqueCodeLTE applies the LTE predicate on the "uniqueCode" field.
func UniqueCodeLTE(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUniqueCode), v))
	})
}

// UniqueCodeContains applies the Contains predicate on the "uniqueCode" field.
func UniqueCodeContains(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUniqueCode), v))
	})
}

// UniqueCodeHasPrefix applies the HasPrefix predicate on the "uniqueCode" field.
func UniqueCodeHasPrefix(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUniqueCode), v))
	})
}

// UniqueCodeHasSuffix applies the HasSuffix predicate on the "uniqueCode" field.
func UniqueCodeHasSuffix(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUniqueCode), v))
	})
}

// UniqueCodeEqualFold applies the EqualFold predicate on the "uniqueCode" field.
func UniqueCodeEqualFold(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUniqueCode), v))
	})
}

// UniqueCodeContainsFold applies the ContainsFold predicate on the "uniqueCode" field.
func UniqueCodeContainsFold(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUniqueCode), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Material {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Material(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Material {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Material(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DateOfEmissionEQ applies the EQ predicate on the "dateOfEmission" field.
func DateOfEmissionEQ(v time.Time) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateOfEmission), v))
	})
}

// DateOfEmissionNEQ applies the NEQ predicate on the "dateOfEmission" field.
func DateOfEmissionNEQ(v time.Time) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateOfEmission), v))
	})
}

// DateOfEmissionIn applies the In predicate on the "dateOfEmission" field.
func DateOfEmissionIn(vs ...time.Time) predicate.Material {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Material(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateOfEmission), v...))
	})
}

// DateOfEmissionNotIn applies the NotIn predicate on the "dateOfEmission" field.
func DateOfEmissionNotIn(vs ...time.Time) predicate.Material {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Material(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateOfEmission), v...))
	})
}

// DateOfEmissionGT applies the GT predicate on the "dateOfEmission" field.
func DateOfEmissionGT(v time.Time) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateOfEmission), v))
	})
}

// DateOfEmissionGTE applies the GTE predicate on the "dateOfEmission" field.
func DateOfEmissionGTE(v time.Time) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateOfEmission), v))
	})
}

// DateOfEmissionLT applies the LT predicate on the "dateOfEmission" field.
func DateOfEmissionLT(v time.Time) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateOfEmission), v))
	})
}

// DateOfEmissionLTE applies the LTE predicate on the "dateOfEmission" field.
func DateOfEmissionLTE(v time.Time) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateOfEmission), v))
	})
}

// NumberOfPagesEQ applies the EQ predicate on the "numberOfPages" field.
func NumberOfPagesEQ(v int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumberOfPages), v))
	})
}

// NumberOfPagesNEQ applies the NEQ predicate on the "numberOfPages" field.
func NumberOfPagesNEQ(v int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumberOfPages), v))
	})
}

// NumberOfPagesIn applies the In predicate on the "numberOfPages" field.
func NumberOfPagesIn(vs ...int) predicate.Material {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Material(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumberOfPages), v...))
	})
}

// NumberOfPagesNotIn applies the NotIn predicate on the "numberOfPages" field.
func NumberOfPagesNotIn(vs ...int) predicate.Material {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Material(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumberOfPages), v...))
	})
}

// NumberOfPagesGT applies the GT predicate on the "numberOfPages" field.
func NumberOfPagesGT(v int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumberOfPages), v))
	})
}

// NumberOfPagesGTE applies the GTE predicate on the "numberOfPages" field.
func NumberOfPagesGTE(v int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumberOfPages), v))
	})
}

// NumberOfPagesLT applies the LT predicate on the "numberOfPages" field.
func NumberOfPagesLT(v int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumberOfPages), v))
	})
}

// NumberOfPagesLTE applies the LTE predicate on the "numberOfPages" field.
func NumberOfPagesLTE(v int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumberOfPages), v))
	})
}

// MaterialTypeEQ applies the EQ predicate on the "materialType" field.
func MaterialTypeEQ(v int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterialType), v))
	})
}

// MaterialTypeNEQ applies the NEQ predicate on the "materialType" field.
func MaterialTypeNEQ(v int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaterialType), v))
	})
}

// MaterialTypeIn applies the In predicate on the "materialType" field.
func MaterialTypeIn(vs ...int) predicate.Material {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Material(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaterialType), v...))
	})
}

// MaterialTypeNotIn applies the NotIn predicate on the "materialType" field.
func MaterialTypeNotIn(vs ...int) predicate.Material {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Material(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaterialType), v...))
	})
}

// MaterialTypeGT applies the GT predicate on the "materialType" field.
func MaterialTypeGT(v int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaterialType), v))
	})
}

// MaterialTypeGTE applies the GTE predicate on the "materialType" field.
func MaterialTypeGTE(v int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaterialType), v))
	})
}

// MaterialTypeLT applies the LT predicate on the "materialType" field.
func MaterialTypeLT(v int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaterialType), v))
	})
}

// MaterialTypeLTE applies the LTE predicate on the "materialType" field.
func MaterialTypeLTE(v int) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaterialType), v))
	})
}

// HasBook applies the HasEdge predicate on the "Book" edge.
func HasBook() predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BookTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BookTable, BookColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBookWith applies the HasEdge predicate on the "Book" edge with a given conditions (other predicates).
func HasBookWith(preds ...predicate.Book) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BookInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BookTable, BookColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNewspaper applies the HasEdge predicate on the "Newspaper" edge.
func HasNewspaper() predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NewspaperTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, NewspaperTable, NewspaperColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNewspaperWith applies the HasEdge predicate on the "Newspaper" edge with a given conditions (other predicates).
func HasNewspaperWith(preds ...predicate.Newspaper) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NewspaperInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, NewspaperTable, NewspaperColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMagazine applies the HasEdge predicate on the "Magazine" edge.
func HasMagazine() predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MagazineTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MagazineTable, MagazineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMagazineWith applies the HasEdge predicate on the "Magazine" edge with a given conditions (other predicates).
func HasMagazineWith(preds ...predicate.Magazine) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MagazineInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MagazineTable, MagazineColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Material) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Material) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Material) predicate.Material {
	return predicate.Material(func(s *sql.Selector) {
		p(s.Not())
	})
}
