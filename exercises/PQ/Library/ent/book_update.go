// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"excercise-library/ent/book"
	"excercise-library/ent/material"
	"excercise-library/ent/predicate"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// BookUpdate is the builder for updating Book entities.
type BookUpdate struct {
	config
	hooks      []Hook
	mutation   *BookMutation
	predicates []predicate.Book
}

// Where adds a new predicate for the builder.
func (bu *BookUpdate) Where(ps ...predicate.Book) *BookUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetAuthorName sets the authorName field.
func (bu *BookUpdate) SetAuthorName(s string) *BookUpdate {
	bu.mutation.SetAuthorName(s)
	return bu
}

// SetGenre sets the genre field.
func (bu *BookUpdate) SetGenre(s string) *BookUpdate {
	bu.mutation.SetGenre(s)
	return bu
}

// SetRelatedMaterialID sets the relatedMaterial edge to Material by id.
func (bu *BookUpdate) SetRelatedMaterialID(id int) *BookUpdate {
	bu.mutation.SetRelatedMaterialID(id)
	return bu
}

// SetNillableRelatedMaterialID sets the relatedMaterial edge to Material by id if the given value is not nil.
func (bu *BookUpdate) SetNillableRelatedMaterialID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetRelatedMaterialID(*id)
	}
	return bu
}

// SetRelatedMaterial sets the relatedMaterial edge to Material.
func (bu *BookUpdate) SetRelatedMaterial(m *Material) *BookUpdate {
	return bu.SetRelatedMaterialID(m.ID)
}

// Mutation returns the BookMutation object of the builder.
func (bu *BookUpdate) Mutation() *BookMutation {
	return bu.mutation
}

// ClearRelatedMaterial clears the relatedMaterial edge to Material.
func (bu *BookUpdate) ClearRelatedMaterial() *BookUpdate {
	bu.mutation.ClearRelatedMaterial()
	return bu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BookUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   book.Table,
			Columns: book.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: book.FieldID,
			},
		},
	}
	if ps := bu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.AuthorName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: book.FieldAuthorName,
		})
	}
	if value, ok := bu.mutation.Genre(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: book.FieldGenre,
		})
	}
	if bu.mutation.RelatedMaterialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   book.RelatedMaterialTable,
			Columns: []string{book.RelatedMaterialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: material.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RelatedMaterialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   book.RelatedMaterialTable,
			Columns: []string{book.RelatedMaterialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: material.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BookUpdateOne is the builder for updating a single Book entity.
type BookUpdateOne struct {
	config
	hooks    []Hook
	mutation *BookMutation
}

// SetAuthorName sets the authorName field.
func (buo *BookUpdateOne) SetAuthorName(s string) *BookUpdateOne {
	buo.mutation.SetAuthorName(s)
	return buo
}

// SetGenre sets the genre field.
func (buo *BookUpdateOne) SetGenre(s string) *BookUpdateOne {
	buo.mutation.SetGenre(s)
	return buo
}

// SetRelatedMaterialID sets the relatedMaterial edge to Material by id.
func (buo *BookUpdateOne) SetRelatedMaterialID(id int) *BookUpdateOne {
	buo.mutation.SetRelatedMaterialID(id)
	return buo
}

// SetNillableRelatedMaterialID sets the relatedMaterial edge to Material by id if the given value is not nil.
func (buo *BookUpdateOne) SetNillableRelatedMaterialID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetRelatedMaterialID(*id)
	}
	return buo
}

// SetRelatedMaterial sets the relatedMaterial edge to Material.
func (buo *BookUpdateOne) SetRelatedMaterial(m *Material) *BookUpdateOne {
	return buo.SetRelatedMaterialID(m.ID)
}

// Mutation returns the BookMutation object of the builder.
func (buo *BookUpdateOne) Mutation() *BookMutation {
	return buo.mutation
}

// ClearRelatedMaterial clears the relatedMaterial edge to Material.
func (buo *BookUpdateOne) ClearRelatedMaterial() *BookUpdateOne {
	buo.mutation.ClearRelatedMaterial()
	return buo
}

// Save executes the query and returns the updated entity.
func (buo *BookUpdateOne) Save(ctx context.Context) (*Book, error) {

	var (
		err  error
		node *Book
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookUpdateOne) SaveX(ctx context.Context) *Book {
	b, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return b
}

// Exec executes the query on the entity.
func (buo *BookUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BookUpdateOne) sqlSave(ctx context.Context) (b *Book, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   book.Table,
			Columns: book.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: book.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Book.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.AuthorName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: book.FieldAuthorName,
		})
	}
	if value, ok := buo.mutation.Genre(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: book.FieldGenre,
		})
	}
	if buo.mutation.RelatedMaterialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   book.RelatedMaterialTable,
			Columns: []string{book.RelatedMaterialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: material.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RelatedMaterialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   book.RelatedMaterialTable,
			Columns: []string{book.RelatedMaterialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: material.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	b = &Book{config: buo.config}
	_spec.Assign = b.assignValues
	_spec.ScanValues = b.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return b, nil
}
