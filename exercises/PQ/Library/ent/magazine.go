// Code generated by entc, DO NOT EDIT.

package ent

import (
	"excercise-library/ent/magazine"
	"excercise-library/ent/material"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Magazine is the model entity for the Magazine schema.
type Magazine struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MagazineQuery when eager-loading is set.
	Edges       MagazineEdges `json:"edges"`
	material_id *int
}

// MagazineEdges holds the relations/edges for other nodes in the graph.
type MagazineEdges struct {
	// RelatedMaterial holds the value of the relatedMaterial edge.
	RelatedMaterial *Material
	// Section holds the value of the Section edge.
	Section []*Section
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RelatedMaterialOrErr returns the RelatedMaterial value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MagazineEdges) RelatedMaterialOrErr() (*Material, error) {
	if e.loadedTypes[0] {
		if e.RelatedMaterial == nil {
			// The edge relatedMaterial was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: material.Label}
		}
		return e.RelatedMaterial, nil
	}
	return nil, &NotLoadedError{edge: "relatedMaterial"}
}

// SectionOrErr returns the Section value or an error if the edge
// was not loaded in eager-loading.
func (e MagazineEdges) SectionOrErr() ([]*Section, error) {
	if e.loadedTypes[1] {
		return e.Section, nil
	}
	return nil, &NotLoadedError{edge: "Section"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Magazine) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // url
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Magazine) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // material_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Magazine fields.
func (m *Magazine) assignValues(values ...interface{}) error {
	if m, n := len(values), len(magazine.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field url", values[0])
	} else if value.Valid {
		m.URL = value.String
	}
	values = values[1:]
	if len(values) == len(magazine.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field material_id", value)
		} else if value.Valid {
			m.material_id = new(int)
			*m.material_id = int(value.Int64)
		}
	}
	return nil
}

// QueryRelatedMaterial queries the relatedMaterial edge of the Magazine.
func (m *Magazine) QueryRelatedMaterial() *MaterialQuery {
	return (&MagazineClient{config: m.config}).QueryRelatedMaterial(m)
}

// QuerySection queries the Section edge of the Magazine.
func (m *Magazine) QuerySection() *SectionQuery {
	return (&MagazineClient{config: m.config}).QuerySection(m)
}

// Update returns a builder for updating this Magazine.
// Note that, you need to call Magazine.Unwrap() before calling this method, if this Magazine
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Magazine) Update() *MagazineUpdateOne {
	return (&MagazineClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Magazine) Unwrap() *Magazine {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Magazine is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Magazine) String() string {
	var builder strings.Builder
	builder.WriteString("Magazine(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", url=")
	builder.WriteString(m.URL)
	builder.WriteByte(')')
	return builder.String()
}

// Magazines is a parsable slice of Magazine.
type Magazines []*Magazine

func (m Magazines) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
