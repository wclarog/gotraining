// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-kit-template/ent/newspaper"
	"go-kit-template/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// NewspaperUpdate is the builder for updating Newspaper entities.
type NewspaperUpdate struct {
	config
	hooks      []Hook
	mutation   *NewspaperMutation
	predicates []predicate.Newspaper
}

// Where adds a new predicate for the builder.
func (nu *NewspaperUpdate) Where(ps ...predicate.Newspaper) *NewspaperUpdate {
	nu.predicates = append(nu.predicates, ps...)
	return nu
}

// SetURL sets the url field.
func (nu *NewspaperUpdate) SetURL(s string) *NewspaperUpdate {
	nu.mutation.SetURL(s)
	return nu
}

// Mutation returns the NewspaperMutation object of the builder.
func (nu *NewspaperUpdate) Mutation() *NewspaperMutation {
	return nu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (nu *NewspaperUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nu.hooks) == 0 {
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewspaperMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NewspaperUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NewspaperUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NewspaperUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nu *NewspaperUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   newspaper.Table,
			Columns: newspaper.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: newspaper.FieldID,
			},
		},
	}
	if ps := nu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newspaper.FieldURL,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{newspaper.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// NewspaperUpdateOne is the builder for updating a single Newspaper entity.
type NewspaperUpdateOne struct {
	config
	hooks    []Hook
	mutation *NewspaperMutation
}

// SetURL sets the url field.
func (nuo *NewspaperUpdateOne) SetURL(s string) *NewspaperUpdateOne {
	nuo.mutation.SetURL(s)
	return nuo
}

// Mutation returns the NewspaperMutation object of the builder.
func (nuo *NewspaperUpdateOne) Mutation() *NewspaperMutation {
	return nuo.mutation
}

// Save executes the query and returns the updated entity.
func (nuo *NewspaperUpdateOne) Save(ctx context.Context) (*Newspaper, error) {
	var (
		err  error
		node *Newspaper
	)
	if len(nuo.hooks) == 0 {
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewspaperMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			mut = nuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NewspaperUpdateOne) SaveX(ctx context.Context) *Newspaper {
	n, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

// Exec executes the query on the entity.
func (nuo *NewspaperUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NewspaperUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nuo *NewspaperUpdateOne) sqlSave(ctx context.Context) (n *Newspaper, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   newspaper.Table,
			Columns: newspaper.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: newspaper.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Newspaper.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := nuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newspaper.FieldURL,
		})
	}
	n = &Newspaper{config: nuo.config}
	_spec.Assign = n.assignValues
	_spec.ScanValues = n.scanValues()
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{newspaper.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return n, nil
}
