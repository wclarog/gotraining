// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"excercise-library/ent/book"
	"excercise-library/ent/magazine"
	"excercise-library/ent/material"
	"excercise-library/ent/newspaper"
	"excercise-library/ent/section"
	"fmt"
	"sync"
	"time"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBook      = "Book"
	TypeMagazine  = "Magazine"
	TypeMaterial  = "Material"
	TypeNewspaper = "Newspaper"
	TypeSection   = "Section"
)

// BookMutation represents an operation that mutate the Books
// nodes in the graph.
type BookMutation struct {
	config
	op            Op
	typ           string
	id            *int
	authorName    *string
	genre         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Book, error)
}

var _ ent.Mutation = (*BookMutation)(nil)

// bookOption allows to manage the mutation configuration using functional options.
type bookOption func(*BookMutation)

// newBookMutation creates new mutation for $n.Name.
func newBookMutation(c config, op Op, opts ...bookOption) *BookMutation {
	m := &BookMutation{
		config:        c,
		op:            op,
		typ:           TypeBook,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBookID sets the id field of the mutation.
func withBookID(id int) bookOption {
	return func(m *BookMutation) {
		var (
			err   error
			once  sync.Once
			value *Book
		)
		m.oldValue = func(ctx context.Context) (*Book, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Book.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBook sets the old Book of the mutation.
func withBook(node *Book) bookOption {
	return func(m *BookMutation) {
		m.oldValue = func(context.Context) (*Book, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BookMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BookMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *BookMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAuthorName sets the authorName field.
func (m *BookMutation) SetAuthorName(s string) {
	m.authorName = &s
}

// AuthorName returns the authorName value in the mutation.
func (m *BookMutation) AuthorName() (r string, exists bool) {
	v := m.authorName
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorName returns the old authorName value of the Book.
// If the Book object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BookMutation) OldAuthorName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAuthorName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAuthorName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorName: %w", err)
	}
	return oldValue.AuthorName, nil
}

// ResetAuthorName reset all changes of the "authorName" field.
func (m *BookMutation) ResetAuthorName() {
	m.authorName = nil
}

// SetGenre sets the genre field.
func (m *BookMutation) SetGenre(s string) {
	m.genre = &s
}

// Genre returns the genre value in the mutation.
func (m *BookMutation) Genre() (r string, exists bool) {
	v := m.genre
	if v == nil {
		return
	}
	return *v, true
}

// OldGenre returns the old genre value of the Book.
// If the Book object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BookMutation) OldGenre(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGenre is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGenre requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenre: %w", err)
	}
	return oldValue.Genre, nil
}

// ResetGenre reset all changes of the "genre" field.
func (m *BookMutation) ResetGenre() {
	m.genre = nil
}

// Op returns the operation name.
func (m *BookMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Book).
func (m *BookMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *BookMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.authorName != nil {
		fields = append(fields, book.FieldAuthorName)
	}
	if m.genre != nil {
		fields = append(fields, book.FieldGenre)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *BookMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case book.FieldAuthorName:
		return m.AuthorName()
	case book.FieldGenre:
		return m.Genre()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *BookMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case book.FieldAuthorName:
		return m.OldAuthorName(ctx)
	case book.FieldGenre:
		return m.OldGenre(ctx)
	}
	return nil, fmt.Errorf("unknown Book field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BookMutation) SetField(name string, value ent.Value) error {
	switch name {
	case book.FieldAuthorName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorName(v)
		return nil
	case book.FieldGenre:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenre(v)
		return nil
	}
	return fmt.Errorf("unknown Book field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *BookMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *BookMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BookMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Book numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *BookMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *BookMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *BookMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Book nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *BookMutation) ResetField(name string) error {
	switch name {
	case book.FieldAuthorName:
		m.ResetAuthorName()
		return nil
	case book.FieldGenre:
		m.ResetGenre()
		return nil
	}
	return fmt.Errorf("unknown Book field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *BookMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *BookMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *BookMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *BookMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *BookMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *BookMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *BookMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Book unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *BookMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Book edge %s", name)
}

// MagazineMutation represents an operation that mutate the Magazines
// nodes in the graph.
type MagazineMutation struct {
	config
	op              Op
	typ             string
	id              *int
	url             *string
	clearedFields   map[string]struct{}
	_Section        map[int]struct{}
	removed_Section map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Magazine, error)
}

var _ ent.Mutation = (*MagazineMutation)(nil)

// magazineOption allows to manage the mutation configuration using functional options.
type magazineOption func(*MagazineMutation)

// newMagazineMutation creates new mutation for $n.Name.
func newMagazineMutation(c config, op Op, opts ...magazineOption) *MagazineMutation {
	m := &MagazineMutation{
		config:        c,
		op:            op,
		typ:           TypeMagazine,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMagazineID sets the id field of the mutation.
func withMagazineID(id int) magazineOption {
	return func(m *MagazineMutation) {
		var (
			err   error
			once  sync.Once
			value *Magazine
		)
		m.oldValue = func(ctx context.Context) (*Magazine, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Magazine.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMagazine sets the old Magazine of the mutation.
func withMagazine(node *Magazine) magazineOption {
	return func(m *MagazineMutation) {
		m.oldValue = func(context.Context) (*Magazine, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MagazineMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MagazineMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MagazineMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetURL sets the url field.
func (m *MagazineMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the url value in the mutation.
func (m *MagazineMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old url value of the Magazine.
// If the Magazine object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MagazineMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldURL is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL reset all changes of the "url" field.
func (m *MagazineMutation) ResetURL() {
	m.url = nil
}

// AddSectionIDs adds the Section edge to Section by ids.
func (m *MagazineMutation) AddSectionIDs(ids ...int) {
	if m._Section == nil {
		m._Section = make(map[int]struct{})
	}
	for i := range ids {
		m._Section[ids[i]] = struct{}{}
	}
}

// RemoveSectionIDs removes the Section edge to Section by ids.
func (m *MagazineMutation) RemoveSectionIDs(ids ...int) {
	if m.removed_Section == nil {
		m.removed_Section = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Section[ids[i]] = struct{}{}
	}
}

// RemovedSection returns the removed ids of Section.
func (m *MagazineMutation) RemovedSectionIDs() (ids []int) {
	for id := range m.removed_Section {
		ids = append(ids, id)
	}
	return
}

// SectionIDs returns the Section ids in the mutation.
func (m *MagazineMutation) SectionIDs() (ids []int) {
	for id := range m._Section {
		ids = append(ids, id)
	}
	return
}

// ResetSection reset all changes of the "Section" edge.
func (m *MagazineMutation) ResetSection() {
	m._Section = nil
	m.removed_Section = nil
}

// Op returns the operation name.
func (m *MagazineMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Magazine).
func (m *MagazineMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MagazineMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.url != nil {
		fields = append(fields, magazine.FieldURL)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MagazineMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case magazine.FieldURL:
		return m.URL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MagazineMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case magazine.FieldURL:
		return m.OldURL(ctx)
	}
	return nil, fmt.Errorf("unknown Magazine field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MagazineMutation) SetField(name string, value ent.Value) error {
	switch name {
	case magazine.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	}
	return fmt.Errorf("unknown Magazine field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MagazineMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MagazineMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MagazineMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Magazine numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MagazineMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MagazineMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MagazineMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Magazine nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MagazineMutation) ResetField(name string) error {
	switch name {
	case magazine.FieldURL:
		m.ResetURL()
		return nil
	}
	return fmt.Errorf("unknown Magazine field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MagazineMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Section != nil {
		edges = append(edges, magazine.EdgeSection)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MagazineMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case magazine.EdgeSection:
		ids := make([]ent.Value, 0, len(m._Section))
		for id := range m._Section {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MagazineMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Section != nil {
		edges = append(edges, magazine.EdgeSection)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MagazineMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case magazine.EdgeSection:
		ids := make([]ent.Value, 0, len(m.removed_Section))
		for id := range m.removed_Section {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MagazineMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MagazineMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MagazineMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Magazine unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MagazineMutation) ResetEdge(name string) error {
	switch name {
	case magazine.EdgeSection:
		m.ResetSection()
		return nil
	}
	return fmt.Errorf("unknown Magazine edge %s", name)
}

// MaterialMutation represents an operation that mutate the Materials
// nodes in the graph.
type MaterialMutation struct {
	config
	op                Op
	typ               string
	id                *int
	uniqueCode        *string
	name              *string
	dateOfEmission    *time.Time
	numberOfPages     *int
	addnumberOfPages  *int
	materialType      *int
	addmaterialType   *int
	clearedFields     map[string]struct{}
	_Book             *int
	cleared_Book      bool
	_Newspaper        *int
	cleared_Newspaper bool
	_Magazine         *int
	cleared_Magazine  bool
	done              bool
	oldValue          func(context.Context) (*Material, error)
}

var _ ent.Mutation = (*MaterialMutation)(nil)

// materialOption allows to manage the mutation configuration using functional options.
type materialOption func(*MaterialMutation)

// newMaterialMutation creates new mutation for $n.Name.
func newMaterialMutation(c config, op Op, opts ...materialOption) *MaterialMutation {
	m := &MaterialMutation{
		config:        c,
		op:            op,
		typ:           TypeMaterial,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMaterialID sets the id field of the mutation.
func withMaterialID(id int) materialOption {
	return func(m *MaterialMutation) {
		var (
			err   error
			once  sync.Once
			value *Material
		)
		m.oldValue = func(ctx context.Context) (*Material, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Material.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMaterial sets the old Material of the mutation.
func withMaterial(node *Material) materialOption {
	return func(m *MaterialMutation) {
		m.oldValue = func(context.Context) (*Material, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MaterialMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MaterialMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MaterialMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUniqueCode sets the uniqueCode field.
func (m *MaterialMutation) SetUniqueCode(s string) {
	m.uniqueCode = &s
}

// UniqueCode returns the uniqueCode value in the mutation.
func (m *MaterialMutation) UniqueCode() (r string, exists bool) {
	v := m.uniqueCode
	if v == nil {
		return
	}
	return *v, true
}

// OldUniqueCode returns the old uniqueCode value of the Material.
// If the Material object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MaterialMutation) OldUniqueCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUniqueCode is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUniqueCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUniqueCode: %w", err)
	}
	return oldValue.UniqueCode, nil
}

// ResetUniqueCode reset all changes of the "uniqueCode" field.
func (m *MaterialMutation) ResetUniqueCode() {
	m.uniqueCode = nil
}

// SetName sets the name field.
func (m *MaterialMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *MaterialMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Material.
// If the Material object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MaterialMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *MaterialMutation) ResetName() {
	m.name = nil
}

// SetDateOfEmission sets the dateOfEmission field.
func (m *MaterialMutation) SetDateOfEmission(t time.Time) {
	m.dateOfEmission = &t
}

// DateOfEmission returns the dateOfEmission value in the mutation.
func (m *MaterialMutation) DateOfEmission() (r time.Time, exists bool) {
	v := m.dateOfEmission
	if v == nil {
		return
	}
	return *v, true
}

// OldDateOfEmission returns the old dateOfEmission value of the Material.
// If the Material object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MaterialMutation) OldDateOfEmission(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDateOfEmission is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDateOfEmission requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateOfEmission: %w", err)
	}
	return oldValue.DateOfEmission, nil
}

// ResetDateOfEmission reset all changes of the "dateOfEmission" field.
func (m *MaterialMutation) ResetDateOfEmission() {
	m.dateOfEmission = nil
}

// SetNumberOfPages sets the numberOfPages field.
func (m *MaterialMutation) SetNumberOfPages(i int) {
	m.numberOfPages = &i
	m.addnumberOfPages = nil
}

// NumberOfPages returns the numberOfPages value in the mutation.
func (m *MaterialMutation) NumberOfPages() (r int, exists bool) {
	v := m.numberOfPages
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberOfPages returns the old numberOfPages value of the Material.
// If the Material object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MaterialMutation) OldNumberOfPages(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNumberOfPages is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNumberOfPages requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberOfPages: %w", err)
	}
	return oldValue.NumberOfPages, nil
}

// AddNumberOfPages adds i to numberOfPages.
func (m *MaterialMutation) AddNumberOfPages(i int) {
	if m.addnumberOfPages != nil {
		*m.addnumberOfPages += i
	} else {
		m.addnumberOfPages = &i
	}
}

// AddedNumberOfPages returns the value that was added to the numberOfPages field in this mutation.
func (m *MaterialMutation) AddedNumberOfPages() (r int, exists bool) {
	v := m.addnumberOfPages
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumberOfPages reset all changes of the "numberOfPages" field.
func (m *MaterialMutation) ResetNumberOfPages() {
	m.numberOfPages = nil
	m.addnumberOfPages = nil
}

// SetMaterialType sets the materialType field.
func (m *MaterialMutation) SetMaterialType(i int) {
	m.materialType = &i
	m.addmaterialType = nil
}

// MaterialType returns the materialType value in the mutation.
func (m *MaterialMutation) MaterialType() (r int, exists bool) {
	v := m.materialType
	if v == nil {
		return
	}
	return *v, true
}

// OldMaterialType returns the old materialType value of the Material.
// If the Material object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MaterialMutation) OldMaterialType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMaterialType is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMaterialType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaterialType: %w", err)
	}
	return oldValue.MaterialType, nil
}

// AddMaterialType adds i to materialType.
func (m *MaterialMutation) AddMaterialType(i int) {
	if m.addmaterialType != nil {
		*m.addmaterialType += i
	} else {
		m.addmaterialType = &i
	}
}

// AddedMaterialType returns the value that was added to the materialType field in this mutation.
func (m *MaterialMutation) AddedMaterialType() (r int, exists bool) {
	v := m.addmaterialType
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaterialType reset all changes of the "materialType" field.
func (m *MaterialMutation) ResetMaterialType() {
	m.materialType = nil
	m.addmaterialType = nil
}

// SetBookID sets the Book edge to Book by id.
func (m *MaterialMutation) SetBookID(id int) {
	m._Book = &id
}

// ClearBook clears the Book edge to Book.
func (m *MaterialMutation) ClearBook() {
	m.cleared_Book = true
}

// BookCleared returns if the edge Book was cleared.
func (m *MaterialMutation) BookCleared() bool {
	return m.cleared_Book
}

// BookID returns the Book id in the mutation.
func (m *MaterialMutation) BookID() (id int, exists bool) {
	if m._Book != nil {
		return *m._Book, true
	}
	return
}

// BookIDs returns the Book ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// BookID instead. It exists only for internal usage by the builders.
func (m *MaterialMutation) BookIDs() (ids []int) {
	if id := m._Book; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBook reset all changes of the "Book" edge.
func (m *MaterialMutation) ResetBook() {
	m._Book = nil
	m.cleared_Book = false
}

// SetNewspaperID sets the Newspaper edge to Newspaper by id.
func (m *MaterialMutation) SetNewspaperID(id int) {
	m._Newspaper = &id
}

// ClearNewspaper clears the Newspaper edge to Newspaper.
func (m *MaterialMutation) ClearNewspaper() {
	m.cleared_Newspaper = true
}

// NewspaperCleared returns if the edge Newspaper was cleared.
func (m *MaterialMutation) NewspaperCleared() bool {
	return m.cleared_Newspaper
}

// NewspaperID returns the Newspaper id in the mutation.
func (m *MaterialMutation) NewspaperID() (id int, exists bool) {
	if m._Newspaper != nil {
		return *m._Newspaper, true
	}
	return
}

// NewspaperIDs returns the Newspaper ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// NewspaperID instead. It exists only for internal usage by the builders.
func (m *MaterialMutation) NewspaperIDs() (ids []int) {
	if id := m._Newspaper; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNewspaper reset all changes of the "Newspaper" edge.
func (m *MaterialMutation) ResetNewspaper() {
	m._Newspaper = nil
	m.cleared_Newspaper = false
}

// SetMagazineID sets the Magazine edge to Magazine by id.
func (m *MaterialMutation) SetMagazineID(id int) {
	m._Magazine = &id
}

// ClearMagazine clears the Magazine edge to Magazine.
func (m *MaterialMutation) ClearMagazine() {
	m.cleared_Magazine = true
}

// MagazineCleared returns if the edge Magazine was cleared.
func (m *MaterialMutation) MagazineCleared() bool {
	return m.cleared_Magazine
}

// MagazineID returns the Magazine id in the mutation.
func (m *MaterialMutation) MagazineID() (id int, exists bool) {
	if m._Magazine != nil {
		return *m._Magazine, true
	}
	return
}

// MagazineIDs returns the Magazine ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// MagazineID instead. It exists only for internal usage by the builders.
func (m *MaterialMutation) MagazineIDs() (ids []int) {
	if id := m._Magazine; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMagazine reset all changes of the "Magazine" edge.
func (m *MaterialMutation) ResetMagazine() {
	m._Magazine = nil
	m.cleared_Magazine = false
}

// Op returns the operation name.
func (m *MaterialMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Material).
func (m *MaterialMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MaterialMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.uniqueCode != nil {
		fields = append(fields, material.FieldUniqueCode)
	}
	if m.name != nil {
		fields = append(fields, material.FieldName)
	}
	if m.dateOfEmission != nil {
		fields = append(fields, material.FieldDateOfEmission)
	}
	if m.numberOfPages != nil {
		fields = append(fields, material.FieldNumberOfPages)
	}
	if m.materialType != nil {
		fields = append(fields, material.FieldMaterialType)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MaterialMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case material.FieldUniqueCode:
		return m.UniqueCode()
	case material.FieldName:
		return m.Name()
	case material.FieldDateOfEmission:
		return m.DateOfEmission()
	case material.FieldNumberOfPages:
		return m.NumberOfPages()
	case material.FieldMaterialType:
		return m.MaterialType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MaterialMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case material.FieldUniqueCode:
		return m.OldUniqueCode(ctx)
	case material.FieldName:
		return m.OldName(ctx)
	case material.FieldDateOfEmission:
		return m.OldDateOfEmission(ctx)
	case material.FieldNumberOfPages:
		return m.OldNumberOfPages(ctx)
	case material.FieldMaterialType:
		return m.OldMaterialType(ctx)
	}
	return nil, fmt.Errorf("unknown Material field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MaterialMutation) SetField(name string, value ent.Value) error {
	switch name {
	case material.FieldUniqueCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUniqueCode(v)
		return nil
	case material.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case material.FieldDateOfEmission:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateOfEmission(v)
		return nil
	case material.FieldNumberOfPages:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberOfPages(v)
		return nil
	case material.FieldMaterialType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaterialType(v)
		return nil
	}
	return fmt.Errorf("unknown Material field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MaterialMutation) AddedFields() []string {
	var fields []string
	if m.addnumberOfPages != nil {
		fields = append(fields, material.FieldNumberOfPages)
	}
	if m.addmaterialType != nil {
		fields = append(fields, material.FieldMaterialType)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MaterialMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case material.FieldNumberOfPages:
		return m.AddedNumberOfPages()
	case material.FieldMaterialType:
		return m.AddedMaterialType()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MaterialMutation) AddField(name string, value ent.Value) error {
	switch name {
	case material.FieldNumberOfPages:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberOfPages(v)
		return nil
	case material.FieldMaterialType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaterialType(v)
		return nil
	}
	return fmt.Errorf("unknown Material numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MaterialMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MaterialMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MaterialMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Material nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MaterialMutation) ResetField(name string) error {
	switch name {
	case material.FieldUniqueCode:
		m.ResetUniqueCode()
		return nil
	case material.FieldName:
		m.ResetName()
		return nil
	case material.FieldDateOfEmission:
		m.ResetDateOfEmission()
		return nil
	case material.FieldNumberOfPages:
		m.ResetNumberOfPages()
		return nil
	case material.FieldMaterialType:
		m.ResetMaterialType()
		return nil
	}
	return fmt.Errorf("unknown Material field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MaterialMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._Book != nil {
		edges = append(edges, material.EdgeBook)
	}
	if m._Newspaper != nil {
		edges = append(edges, material.EdgeNewspaper)
	}
	if m._Magazine != nil {
		edges = append(edges, material.EdgeMagazine)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MaterialMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case material.EdgeBook:
		if id := m._Book; id != nil {
			return []ent.Value{*id}
		}
	case material.EdgeNewspaper:
		if id := m._Newspaper; id != nil {
			return []ent.Value{*id}
		}
	case material.EdgeMagazine:
		if id := m._Magazine; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MaterialMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MaterialMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MaterialMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_Book {
		edges = append(edges, material.EdgeBook)
	}
	if m.cleared_Newspaper {
		edges = append(edges, material.EdgeNewspaper)
	}
	if m.cleared_Magazine {
		edges = append(edges, material.EdgeMagazine)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MaterialMutation) EdgeCleared(name string) bool {
	switch name {
	case material.EdgeBook:
		return m.cleared_Book
	case material.EdgeNewspaper:
		return m.cleared_Newspaper
	case material.EdgeMagazine:
		return m.cleared_Magazine
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MaterialMutation) ClearEdge(name string) error {
	switch name {
	case material.EdgeBook:
		m.ClearBook()
		return nil
	case material.EdgeNewspaper:
		m.ClearNewspaper()
		return nil
	case material.EdgeMagazine:
		m.ClearMagazine()
		return nil
	}
	return fmt.Errorf("unknown Material unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MaterialMutation) ResetEdge(name string) error {
	switch name {
	case material.EdgeBook:
		m.ResetBook()
		return nil
	case material.EdgeNewspaper:
		m.ResetNewspaper()
		return nil
	case material.EdgeMagazine:
		m.ResetMagazine()
		return nil
	}
	return fmt.Errorf("unknown Material edge %s", name)
}

// NewspaperMutation represents an operation that mutate the Newspapers
// nodes in the graph.
type NewspaperMutation struct {
	config
	op            Op
	typ           string
	id            *int
	url           *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Newspaper, error)
}

var _ ent.Mutation = (*NewspaperMutation)(nil)

// newspaperOption allows to manage the mutation configuration using functional options.
type newspaperOption func(*NewspaperMutation)

// newNewspaperMutation creates new mutation for $n.Name.
func newNewspaperMutation(c config, op Op, opts ...newspaperOption) *NewspaperMutation {
	m := &NewspaperMutation{
		config:        c,
		op:            op,
		typ:           TypeNewspaper,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNewspaperID sets the id field of the mutation.
func withNewspaperID(id int) newspaperOption {
	return func(m *NewspaperMutation) {
		var (
			err   error
			once  sync.Once
			value *Newspaper
		)
		m.oldValue = func(ctx context.Context) (*Newspaper, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Newspaper.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNewspaper sets the old Newspaper of the mutation.
func withNewspaper(node *Newspaper) newspaperOption {
	return func(m *NewspaperMutation) {
		m.oldValue = func(context.Context) (*Newspaper, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NewspaperMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NewspaperMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *NewspaperMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetURL sets the url field.
func (m *NewspaperMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the url value in the mutation.
func (m *NewspaperMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old url value of the Newspaper.
// If the Newspaper object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NewspaperMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldURL is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL reset all changes of the "url" field.
func (m *NewspaperMutation) ResetURL() {
	m.url = nil
}

// Op returns the operation name.
func (m *NewspaperMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Newspaper).
func (m *NewspaperMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *NewspaperMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.url != nil {
		fields = append(fields, newspaper.FieldURL)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *NewspaperMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case newspaper.FieldURL:
		return m.URL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *NewspaperMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case newspaper.FieldURL:
		return m.OldURL(ctx)
	}
	return nil, fmt.Errorf("unknown Newspaper field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NewspaperMutation) SetField(name string, value ent.Value) error {
	switch name {
	case newspaper.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	}
	return fmt.Errorf("unknown Newspaper field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *NewspaperMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *NewspaperMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NewspaperMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Newspaper numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *NewspaperMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *NewspaperMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *NewspaperMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Newspaper nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *NewspaperMutation) ResetField(name string) error {
	switch name {
	case newspaper.FieldURL:
		m.ResetURL()
		return nil
	}
	return fmt.Errorf("unknown Newspaper field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *NewspaperMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *NewspaperMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *NewspaperMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *NewspaperMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *NewspaperMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *NewspaperMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *NewspaperMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Newspaper unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *NewspaperMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Newspaper edge %s", name)
}

// SectionMutation represents an operation that mutate the Sections
// nodes in the graph.
type SectionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	code          *string
	content       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Section, error)
}

var _ ent.Mutation = (*SectionMutation)(nil)

// sectionOption allows to manage the mutation configuration using functional options.
type sectionOption func(*SectionMutation)

// newSectionMutation creates new mutation for $n.Name.
func newSectionMutation(c config, op Op, opts ...sectionOption) *SectionMutation {
	m := &SectionMutation{
		config:        c,
		op:            op,
		typ:           TypeSection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSectionID sets the id field of the mutation.
func withSectionID(id int) sectionOption {
	return func(m *SectionMutation) {
		var (
			err   error
			once  sync.Once
			value *Section
		)
		m.oldValue = func(ctx context.Context) (*Section, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Section.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSection sets the old Section of the mutation.
func withSection(node *Section) sectionOption {
	return func(m *SectionMutation) {
		m.oldValue = func(context.Context) (*Section, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SectionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCode sets the code field.
func (m *SectionMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the code value in the mutation.
func (m *SectionMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old code value of the Section.
// If the Section object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SectionMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCode is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode reset all changes of the "code" field.
func (m *SectionMutation) ResetCode() {
	m.code = nil
}

// SetContent sets the content field.
func (m *SectionMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the content value in the mutation.
func (m *SectionMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old content value of the Section.
// If the Section object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SectionMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent reset all changes of the "content" field.
func (m *SectionMutation) ResetContent() {
	m.content = nil
}

// Op returns the operation name.
func (m *SectionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Section).
func (m *SectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SectionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.code != nil {
		fields = append(fields, section.FieldCode)
	}
	if m.content != nil {
		fields = append(fields, section.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case section.FieldCode:
		return m.Code()
	case section.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case section.FieldCode:
		return m.OldCode(ctx)
	case section.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown Section field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case section.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case section.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown Section field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SectionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SectionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Section numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Section nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SectionMutation) ResetField(name string) error {
	switch name {
	case section.FieldCode:
		m.ResetCode()
		return nil
	case section.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown Section field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SectionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SectionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SectionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SectionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Section unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SectionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Section edge %s", name)
}
